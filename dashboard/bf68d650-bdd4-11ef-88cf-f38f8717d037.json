{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : [ {
      "customerId" : {
        "entityType" : "CUSTOMER",
        "id" : "8de1ef50-a591-11ef-88cf-f38f8717d037"
      },
      "title" : "Dilmah User 01",
      "public" : false
    } ],
    "configuration" : {
      "description" : "",
      "widgets" : {
        "f0f1d67a-94da-cbdb-6673-a51e5a7f56a3" : {
          "typeFullFqn" : "system.cards.html_card",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "static",
              "name" : "function",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.15479322438769105,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(0, 0, 0)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<body>\r\n<label for=\"language\" class=\"language\">Asset Name:</label>\r\n    <select name=\"asset\" id=\"asset\" class=\"select\">\r\n            <option value=\"01\" selected>Panel Room</option>\r\n    </select>\r\n    <div class=\"MTBtitle\">Dilmah Warehouse 6 Floor 2 Historical Energy Average</div>\r\n    <div class=\"formContainer\">\r\n        <div class=\"formGroup\">\r\n            <label for=\"fromDate\" class=\"from\">From:</label>\r\n            <input type=\"datetime-local\" id=\"fromDate\" name=\"fromDate\">\r\n        </div>\r\n        <div class=\"formGroup\">\r\n            <label for=\"toDate\" class=\"to\">To:</label>\r\n            <input type=\"datetime-local\" id=\"toDate\" name=\"toDate\">\r\n        </div>\r\n        <div class=\"formGroup\">\r\n            <label for=\"parameter\" class=\"parameter\">Select Parameter:</label>\r\n            <select id=\"parameter\" name=\"parameter\">\r\n                <option value=\"voltageN1\">Voltage L-N (A)</option>\r\n                <option value=\"voltageN2\">Voltage L-N (B)</option>\r\n                <option value=\"voltageN3\">Voltage L-N (C)</option>\r\n                <option value=\"voltageL1\">Voltage L-L (A)</option>\r\n                <option value=\"voltageL2\">Voltage L-L (B)</option>\r\n                <option value=\"voltageL3\">Voltage L-L (C)</option>\r\n                <option value=\"current1\">Current A</option>\r\n                <option value=\"current2\">Current B</option>\r\n                <option value=\"current3\">Current C</option>\r\n                <option value=\"actipow1\">Active Power A</option>\r\n                <option value=\"actipow2\">Active Power B</option>\r\n                <option value=\"actipow3\">Active Power C</option>\r\n                <option value=\"apppow1\">Apparent Power A</option>\r\n                <option value=\"apppow2\">Apparent Power B</option>\r\n                <option value=\"apppow3\">Apparent Power C</option>\r\n                <option value=\"powerFactor1\">Power Factor A</option>\r\n                <option value=\"powerFactor2\">Power Factor B</option>\r\n                <option value=\"powerFactor3\">Power Factor C</option>\r\n                <option value=\"frequency\">Frequency (Hz)</option>\r\n                <option value=\"mWh\">Total Active Energy</option>\r\n                <option value=\"mVarh\">Total Apparent Energy</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"formGroup\">\r\n            <button id=\"updateChart\">Update</button>\r\n        </div>\r\n    </div>\r\n    <div id=\"historicalChart\" class=\"historical-chart\"></div>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\"></script>\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script>\r\n        document.getElementById('updateChart').addEventListener('click', async () => {\r\n            const fromDate = document.getElementById('fromDate').value;\r\n            const toDate = document.getElementById('toDate').value;\r\n\r\n            if (!fromDate || !toDate) {\r\n                alert(\"Please select both 'From' and 'To' dates.\");\r\n                return;\r\n            }\r\n\r\n            const token = await getJwtToken();\r\n            if (token) {\r\n                let apiToken = 0;\r\n                let asset_selection = document.getElementById('asset').value;\r\n                if (asset_selection == \"01\") {\r\n                    apiToken = '9a4e3350-a58e-11ef-88cf-f38f8717d037';\r\n                }\r\n                console.log('Asset Number is :', asset_selection);\r\n                console.log('API TOKEN is :', apiToken);\r\n                const telemetryData = await fetchTelemetryData(token, fromDate, toDate, apiToken);\r\n                displayChartAndMonthlyAvg(telemetryData);\r\n            }\r\n        });\r\n\r\n        async function getJwtToken() {\r\n            const loginUrl = 'https://energy-app.utech-iiot.lk/api/auth/login';\r\n            const credentials = { username: 'dilmah@gmail.com', password: 'Dilmah@2024' };\r\n            try {\r\n                const response = await fetch(loginUrl, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(credentials)\r\n                });\r\n                const data = await response.json();\r\n                return data.token;\r\n            } catch (error) {\r\n                console.error('Login error:', error);\r\n            }\r\n        }\r\n\r\n        async function fetchTelemetryData(token, fromDate, toDate, assetID) {\r\n            const apiUrl = `https://energy-app.utech-iiot.lk/api/plugins/telemetry/DEVICE/${assetID}/values/timeseries?keys=data&startTs=${new Date(fromDate).getTime()}&endTs=${new Date(toDate).getTime()}&limit=40000`;\r\n            try {\r\n                const response = await fetch(apiUrl, {\r\n                    method: 'GET',\r\n                    headers: { 'Authorization': `Bearer ${token}` }\r\n                });\r\n                return await response.json();\r\n            } catch (error) {\r\n                console.error('Error fetching telemetry data:', error);\r\n            }\r\n        }\r\n\r\n        function displayChartAndMonthlyAvg(data) {\r\n            let totalUnits = 0;\r\n            let seriesData = [];\r\n            let monthlyMaxValues = {};\r\n            let names;\r\n            let unit;\r\n            const dataPoints = data?.data || [];\r\n\r\n\r\n            dataPoints.forEach(dataPoint => {\r\n                const json_form = JSON.parse(dataPoint.value);\r\n                // console.log('JSON Packet area :', json_form);\r\n                let value;\r\n                let parameter_selection = document.getElementById('parameter').value;\r\n                if (parameter_selection == \"voltageN1\") {\r\n                    value = json_form.M01;\r\n                    unit = \"V\";\r\n                    names = \"Voltage L-N (A)\";\r\n                } else if(parameter_selection == \"voltageN2\") {\r\n                    value = json_form.M02;\r\n                    unit = \"V\";\r\n                    names = \"Voltage L-N (B)\";\r\n                } else if(parameter_selection == \"voltageN3\") {\r\n                    value = json_form.M03;\r\n                    unit = \"V\";\r\n                    names = \"Voltage L-N (C)\";\r\n                } else if(parameter_selection == \"voltageL1\") {\r\n                    value = json_form.M04;\r\n                    unit = \"V\";\r\n                    names = \"Voltage L-L (A)\";\r\n                } else if(parameter_selection == \"voltageL2\") {\r\n                    value = json_form.M05;\r\n                    unit = \"V\";\r\n                    names = \"Voltage L-L (B)\";\r\n                } else if(parameter_selection == \"voltageL3\") {\r\n                    value = json_form.M06;\r\n                    unit = \"V\";\r\n                    names = \"Voltage L-L (C)\";\r\n                }\r\n                else if(parameter_selection == \"current1\") {\r\n                    value = json_form.M07;\r\n                    unit = \"A\";\r\n                    names = \"Current A\";\r\n                }\r\n                else if(parameter_selection == \"current2\") {\r\n                    value = json_form.M08;\r\n                    unit = \"A\";\r\n                    names = \"Current B\";\r\n                }\r\n                else if(parameter_selection == \"current3\") {\r\n                    value = json_form.M09;\r\n                    unit = \"A\";\r\n                    names = \"Current C\";\r\n                }\r\n                else if(parameter_selection == \"actipow1\") {\r\n                    value = json_form.M10;\r\n                    unit = \"kW\";\r\n                    names = \"Active Power A\";\r\n                }\r\n                else if(parameter_selection == \"actipow2\") {\r\n                    value = json_form.M11;\r\n                    unit = \"kW\";\r\n                    names = \"Active Power B\";\r\n                }\r\n                else if(parameter_selection == \"actipow3\") {\r\n                    value = json_form.M12;\r\n                    unit = \"kW\";\r\n                    names = \"Active Power C\";\r\n                }\r\n                else if(parameter_selection == \"apppow1\") {\r\n                    value = json_form.M13;\r\n                    unit = \"kVA\";\r\n                    names = \"Apparent Power A\";\r\n                }\r\n                else if(parameter_selection == \"apppow2\") {\r\n                    value = json_form.M14;\r\n                    unit = \"kVA\";\r\n                    names = \"Apparent Power B\";\r\n                }\r\n                else if(parameter_selection == \"apppow3\") {\r\n                    value = json_form.M15;\r\n                    unit = \"kVA\";\r\n                    names = \"Apparent Power C\";\r\n                }\r\n                else if(parameter_selection == \"powerFactor1\") {\r\n                    value = json_form.M16;\r\n                    unit = \"\";\r\n                    names = \"Power Factor A\";\r\n                }\r\n                else if(parameter_selection == \"powerFactor2\") {\r\n                    value = json_form.M17;\r\n                    unit = \"\";\r\n                    names = \"Power Factor B\";\r\n                }\r\n                else if(parameter_selection == \"powerFactor3\") {\r\n                    value = json_form.M18;\r\n                    unit = \"\";\r\n                    names = \"Power Factor C\";\r\n                }\r\n                else if(parameter_selection == \"frequency\") {\r\n                    value = json_form.M20;\r\n                    unit = \"Hz\";\r\n                    names = \"Frequency\";\r\n                }\r\n                else if(parameter_selection == \"mWh\") {\r\n                    value = json_form.M21;\r\n                    unit = \"kWh\";\r\n                    names = \"Active Energy\";\r\n                }\r\n                else if(parameter_selection == \"mVarh\") {\r\n                    value = json_form.M22;\r\n                    unit = \"kVArh\";\r\n                    names = \"Apparent Energy\";\r\n                }\r\n                seriesData.push({\r\n                    x: new Date(dataPoint.ts).getTime(),\r\n                    y: (value).toFixed(2)  \r\n                });\r\n            });\r\n            console.log(\"Series data for chart:\", seriesData);\r\n            \r\n            \r\n            renderChart(seriesData, names, unit);\r\n        }\r\n        function renderChart(seriesData, names, unit) {\r\n            let avgLineValue = 12;\r\n            if (window.historicalChart) {\r\n                if (typeof window.historicalChart.destroy === 'function') {\r\n                    //console.log('Destroying existing chart...');\r\n                    window.historicalChart.destroy();\r\n                } else {\r\n                    console.log('historicalChart found, but destroy method not available');\r\n                }\r\n            } else {\r\n                console.log('No existing chart to destroy.');\r\n            }\r\n\r\n            const options = {\r\n                chart: {\r\n                    type: 'line',\r\n                    height: 680,\r\n                    foreColor: '#ffffff',\r\n                    toolbar: {\r\n                        tools: {\r\n                            download: true \r\n                        },\r\n                        autoSelected: 'pan' \r\n                    },\r\n                    events: {\r\n                        beforeDownload: function({ dataURI, options }) {\r\n                            \r\n                            const fromDate = document.getElementById(\"fromDate\").value || \"start\";\r\n                            const toDate = document.getElementById(\"toDate\").value || \"end\";\r\n                            \r\n                            \r\n                            const cleanFromDate = fromDate.replace(/[:T]/g, \"-\");\r\n                            const cleanToDate = toDate.replace(/[:T]/g, \"-\");\r\n        \r\n                            \r\n                            const fileName = `historical_energy_${cleanFromDate}_to_${cleanToDate}`;\r\n                            options.chart.toolbar.download.filename = fileName;\r\n                        }\r\n                    }\r\n                },\r\n                series: [ {\r\n                        name: names,\r\n                        data: seriesData\r\n                    }],\r\n                xaxis: {\r\n                    type: 'datetime',\r\n                    title: { text: 'Time' }\r\n                },\r\n                yaxis: {\r\n                    title: { text: names }\r\n                },\r\n                title: {\r\n                    text: 'Historical Graph',\r\n                    align: 'center'\r\n                },\r\n                tooltip: {\r\n                    x: { format: 'dd MMM yyyy HH:mm' },\r\n                    y: { formatter: (val) => `${val} ${unit}` }\r\n                },\r\n                annotations: {\r\n                // yaxis: [{\r\n                //     y: avgLineValue,\r\n                //     borderColor: '#FF5733',\r\n                //     label: {\r\n                //         borderColor: '#FF5733',\r\n                //         style: {\r\n                //             color: '#fff',\r\n                //             background: '#FF5733'\r\n                //         },\r\n                //         text: `Average: ${avgLineValue} kWh`\r\n                //     }\r\n                // }]\r\n            }\r\n            };\r\n\r\n            window.historicalChart = new ApexCharts(document.querySelector(\"#historicalChart\"), options);\r\n            window.historicalChart.render();\r\n        }\r\n        //renderChart();\r\n    </script>\r\n</body>",
              "cardCss" : "\r\n            body {\r\n            font-family: Arial, sans-serif;\r\n            background-color: #000000;\r\n            color: #000000;\r\n        }\r\n        \r\n        .language, .from, .to, .parameter {\r\n            color : white;\r\n            \r\n        }\r\n        .formContainer {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            gap: 20px;\r\n            margin-bottom: 20px;\r\n            align-items: center;\r\n        }\r\n        .formGroup {\r\n            display: flex;\r\n            flex-direction: column;\r\n            width: 20%;\r\n        }\r\n        .formGroup label {\r\n            margin-bottom: 5px;\r\n            font-weight: bold;\r\n        }\r\n        .formGroup input, .formGroup select {\r\n            padding: 10px;\r\n            border-radius: 6px;\r\n            border: 1px solid #575757;\r\n            font-size: 15px;\r\n            width: 100%;\r\n            background-color: #2e2e2e;\r\n            color: #ffffff;\r\n        }\r\n        .formGroup button {\r\n            padding: 12px;\r\n            background-color: #007bff;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 6px;\r\n            cursor: pointer;\r\n            font-size: 15px;\r\n        }\r\n        .formGroup button:hover {\r\n            background-color: #0056b3;\r\n        }\r\n        .historical-chart {\r\n            margin-top: 25px;\r\n            width: 100%;\r\n            height: 700px;\r\n        }\r\n        .MTBtitle {\r\n            font-size: 22px;\r\n            font-weight: bold;\r\n            text-align: center;\r\n            margin-bottom: 20px;\r\n            color: #00e6a3;\r\n        }\r\n        #monthlyAverage {\r\n            text-align: center;\r\n            font-size: 18px;\r\n            margin-top: 20px;\r\n            color: #00e6a3;\r\n        }\r\n        #historicalChart {\r\n            height: 200px;\r\n            background-color: #333644;\r\n            border-radius: 10px;\r\n            padding: 20px;\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\r\n        }"
            },
            "title" : "HTML Card",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "f0f1d67a-94da-cbdb-6673-a51e5a7f56a3"
        }
      },
      "states" : {
        "default" : {
          "name" : "Dilmah Warehouse 6 Floor 2 Graph",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "f0f1d67a-94da-cbdb-6673-a51e5a7f56a3" : {
                  "sizeX" : 28,
                  "sizeY" : 13,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%"
              }
            }
          }
        }
      },
      "entityAliases" : { },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideLastInterval" : false,
        "hideQuickInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1734504291729,
            "endTimeMs" : 1734590691729
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "bf68d650-bdd4-11ef-88cf-f38f8717d037"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Dilmah Warehouse 6 Floor 2 Graph",
    "title" : "Dilmah Warehouse 6 Floor 2 Graph"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}